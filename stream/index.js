/**
 * ストリーム
 *
 * ストリームとはデータの流れを扱うためのインターフェース
 * 効率的な処理を実現できることに加え、複数の機能を容易に結合できることも強み
 */
const fs = require('fs')

// ストリームを使わない（あえて冗長な）ファイルをコピーする関数
function copyFile(src, dest, cb) {
  fs.readFile(src, (err, data) => {
    if (err) {
      return cb(err)
    }

    // 読み込んだ内容を別のファイルに書き出す
    fs.writeFile(dest, data, cb)
  })
}

// 対象のファイルが大きくなければ問題なく動作するが2GB以上になるとエラーを投げる
copyFile('./README.md', './README_copy.md', (err) => console.log(err))
// 2GB以上になるとNode.jsで扱えるバッファサイズの上限を超過してしまう
// バッファサイズの範囲内であっても、大きなファイルの読み込み結果全体が
// メモリ上に展開されるとメモリが圧縮されてパフォーマンスに影響がでる

// その問題を解決するためには、全ファイルの読み込みが完了してからその内容を書き出すのではなく
// 読み込みが完了した部分から順次書き込んでいくような処理を実現する必要がある
// これを「ストリーム」という
